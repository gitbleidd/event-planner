// <auto-generated />
using System;
using EventPlanner.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EventPlanner.Data.Migrations
{
    [DbContext(typeof(EventPlannerContext))]
    partial class EventPlannerContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("content")
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EventPlanner.Data.Entities.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_admins");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_admins_user_id");

                    b.ToTable("admins", "content");
                });

            modelBuilder.Entity("EventPlanner.Data.Entities.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("BeginTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("begin_time");

                    b.Property<decimal?>("Cost")
                        .HasColumnType("numeric")
                        .HasColumnName("cost");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTimeOffset>("EndTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_time");

                    b.Property<int>("ExtraSlotsPerUser")
                        .HasColumnType("integer")
                        .HasColumnName("extra_slots_per_user");

                    b.Property<string>("LocationName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("location_name");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("OrganizerName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("organizer_name");

                    b.Property<DateTimeOffset>("RegistrationEndTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("registration_end_time");

                    b.Property<string>("Resources")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("resources");

                    b.Property<int?>("Slots")
                        .HasColumnType("integer")
                        .HasColumnName("slots");

                    b.Property<int?>("TypeId")
                        .HasColumnType("integer")
                        .HasColumnName("type_id");

                    b.HasKey("Id")
                        .HasName("pk_events");

                    b.HasIndex("TypeId")
                        .HasDatabaseName("ix_events_type_id");

                    b.ToTable("events", "content");
                });

            modelBuilder.Entity("EventPlanner.Data.Entities.EventType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_event_types");

                    b.ToTable("event_types", "content");
                });

            modelBuilder.Entity("EventPlanner.Data.Entities.EventUser", b =>
                {
                    b.Property<int>("EventId")
                        .HasColumnType("integer")
                        .HasColumnName("event_id");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<bool>("IsParticipating")
                        .HasColumnType("boolean")
                        .HasColumnName("is_participating");

                    b.Property<int>("TakenExtraUsersCount")
                        .HasColumnType("integer")
                        .HasColumnName("taken_extra_users_count");

                    b.HasKey("EventId", "UserId")
                        .HasName("pk_event_users");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_event_users_user_id");

                    b.ToTable("event_users", "content");
                });

            modelBuilder.Entity("EventPlanner.Data.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<string>("MiddleName")
                        .HasColumnType("text")
                        .HasColumnName("middle_name");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_users_email");

                    b.ToTable("users", "content");
                });

            modelBuilder.Entity("EventPlanner.Data.Entities.Admin", b =>
                {
                    b.HasOne("EventPlanner.Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_admins_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventPlanner.Data.Entities.Event", b =>
                {
                    b.HasOne("EventPlanner.Data.Entities.EventType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .HasConstraintName("fk_events_event_types_type_id");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("EventPlanner.Data.Entities.EventUser", b =>
                {
                    b.HasOne("EventPlanner.Data.Entities.Event", "Event")
                        .WithMany("EventUsers")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_event_users_events_event_id");

                    b.HasOne("EventPlanner.Data.Entities.User", "User")
                        .WithMany("EventUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_event_users_users_user_id");

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventPlanner.Data.Entities.Event", b =>
                {
                    b.Navigation("EventUsers");
                });

            modelBuilder.Entity("EventPlanner.Data.Entities.User", b =>
                {
                    b.Navigation("EventUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
